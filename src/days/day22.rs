use std::{collections::HashMap, fmt::{Display, Formatter}};

use crate::days;

const CUBE_MAP: &str = "                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  5555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
2222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111";

const CHUNK_SIZE: i32 = 50;

const ZERO: u8 = '0' as u8;

pub enum Rotation {
    Left,
    Right,
}

impl From<char> for Rotation {
    fn from(c: char) -> Self {
        match c {
            'L' => Self::Left,
            'R' => Self::Right,
            _ => panic!("Invalid rotation"),
        }
    }
}

#[derive(Hash, Eq, PartialEq, Debug, Copy, Clone)]
enum Direction {
    Up,
    Down,
    Left,
    Right,
}

impl Direction {
    fn into(self) -> i32 {
        match self {
            Direction::Right => 0,
            Direction::Down => 1,
            Direction::Left => 2,
            Direction::Up => 3,
        }
    }

    fn rotate(&self, rotation: &Rotation) -> Self {
        match rotation {
            Rotation::Left => match self {
                Direction::Up => Direction::Left,
                Direction::Down => Direction::Right,
                Direction::Left => Direction::Down,
                Direction::Right => Direction::Up,
            },
            Rotation::Right => match self {
                Direction::Up => Direction::Right,
                Direction::Down => Direction::Left,
                Direction::Left => Direction::Up,
                Direction::Right => Direction::Down,
            },
        }
    }
}

impl Display for Direction {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            Direction::Up => write!(f, "^"),
            Direction::Down => write!(f, "v"),
            Direction::Left => write!(f, "<"),
            Direction::Right => write!(f, ">"),
        }
    }
}

#[derive(Hash, Eq, PartialEq, Debug, Copy, Clone)]
struct Pos {
    x: i32,
    y: i32,
}

impl Pos {
    fn new(x: i32, y: i32) -> Self {
        Self { x, y }
    }

    fn move_dir(&self, dir: &Direction) -> Self {
        match dir {
            Direction::Up => Self {
                x: self.x,
                y: self.y - 1,
            },
            Direction::Down => Self {
                x: self.x,
                y: self.y + 1,
            },
            Direction::Left => Self {
                x: self.x - 1,
                y: self.y,
            },
            Direction::Right => Self {
                x: self.x + 1,
                y: self.y,
            },
        }
    }
}

#[derive(Clone)]
pub struct Grid {
    map: HashMap<Pos, (bool, u8)>,
    pos: Pos,
    dir: Direction,
}

impl From<&str> for Grid {
    fn from(s: &str) -> Self {
        //         ...#
        //         .#..
        //         #...
        //         ....
        // ...#.......#
        // ........#...
        // ..#....#....
        // ..........#.
        //         ...#....
        //         .....#..
        //         .#......
        //         ......#.
        // An example of a grid
        // The starting position is the leftmost . in the top row
        // The direction is right
        let mut map = HashMap::new();
        let mut pos = None;
        let mut y = 0;
        for (line, line2) in s.lines().zip(CUBE_MAP.lines()) {
            let mut x = 0;
            for (c, c2) in line.chars().zip(line2.chars()) {
                match c {
                    '#' => {
                        map.insert(Pos::new(x, y), (true, c2 as u8 - ZERO));
                    }
                    '.' => {
                        map.insert(Pos::new(x, y), (false, c2 as u8 - ZERO));
                        if pos.is_none() {
                            pos = Some(Pos::new(x, y));
                        }
                    }
                    _ => (),
                }
                x += 1;
            }
            y += 1;
        }
        let dir = Direction::Right;
        Self {
            map,
            pos: pos.unwrap(),
            dir,
        }
    }
}

impl Grid {
    fn move_dir(&mut self) -> bool {
        let mut pos = self.pos.move_dir(&self.dir);

        // If we went out of bounds, wrap around to the other side
        if self.map.get(&pos).is_none() {
            match self.dir {
                Direction::Up => {
                    pos.y = self
                        .map
                        .keys()
                        .filter(|p| p.x == pos.x)
                        .map(|p| p.y)
                        .max()
                        .unwrap();
                }
                Direction::Down => {
                    pos.y = self
                        .map
                        .keys()
                        .filter(|p| p.x == pos.x)
                        .map(|p| p.y)
                        .min()
                        .unwrap();
                }
                Direction::Left => {
                    pos.x = self
                        .map
                        .keys()
                        .filter(|p| p.y == pos.y)
                        .map(|p| p.x)
                        .max()
                        .unwrap();
                }
                Direction::Right => {
                    pos.x = self
                        .map
                        .keys()
                        .filter(|p| p.y == pos.y)
                        .map(|p| p.x)
                        .min()
                        .unwrap();
                }
            }
        }
        if self.map.get(&pos).unwrap().0 {
            true
        } else {
            self.pos = pos;
            false
        }
    }

    fn move_input(&mut self, input: &Input) {
        match input {
            Input::Rotation(rotation) => {
                self.dir = self.dir.rotate(rotation);
            }
            Input::Move(amount) => {
                for _ in 0..*amount {
                    if self.move_dir() {
                        break;
                    }
                }
            }
        }
    }

    fn move_dir_3d(&mut self) -> bool {
        let mut pos = self.pos.move_dir(&self.dir);

        //   5566
        //   5566
        //   44
        //   44
        // 2233
        // 2233
        // 11
        // 11

        // println!("Before Ln {}, Col {}", pos.y + 1, pos.x + 1);
        //        After  Ln {}, Col {}

        let old_dir = self.dir.clone();
        if self.map.get(&pos).is_none() {
            match self.map.get(&self.pos).unwrap().1 {
                1 => match self.dir {
                    Direction::Up => unreachable!(),

                    Direction::Down => {
                        pos.x += CHUNK_SIZE * 2;
                        pos.y = 0;
                        self.dir = Direction::Down;
                    }
                    Direction::Left => {
                        pos.x = pos.y - CHUNK_SIZE * 2;
                        pos.y = 0;
                        self.dir = Direction::Down;
                    }
                    Direction::Right => {
                        pos.x = pos.y - CHUNK_SIZE * 2;
                        pos.y = CHUNK_SIZE * 3 - 1;
                        self.dir = Direction::Up;
                    }
                },
                2 => match self.dir {
                    Direction::Down => unreachable!(),
                    Direction::Right => unreachable!(),

                    Direction::Up => {
                        pos.y = CHUNK_SIZE + pos.x;
                        pos.x = CHUNK_SIZE;
                        self.dir = Direction::Right;
                    }
                    Direction::Left => {
                        pos.y = (CHUNK_SIZE - 1) - (pos.y - CHUNK_SIZE * 2);
                        pos.x = CHUNK_SIZE;
                        self.dir = Direction::Right;
                    }
                },
                3 => match self.dir {
                    Direction::Up => unreachable!(),
                    Direction::Left => unreachable!(),

                    Direction::Down => {
                        pos.y = CHUNK_SIZE * 2 + pos.x;
                        pos.x = CHUNK_SIZE - 1;
                        self.dir = Direction::Left;
                    }
                    Direction::Right => {
                        pos.y = (CHUNK_SIZE - 1) - (pos.y - CHUNK_SIZE * 2);
                        pos.x = CHUNK_SIZE * 3 - 1;
                        self.dir = Direction::Left;
                    }
                },
                4 => match self.dir {
                    Direction::Up => unreachable!(),
                    Direction::Down => unreachable!(),

                    Direction::Left => {
                        pos.x = pos.y - CHUNK_SIZE;
                        pos.y = CHUNK_SIZE * 2;
                        self.dir = Direction::Down;
                    }
                    Direction::Right => {
                        pos.x = CHUNK_SIZE + pos.y;
                        pos.y = CHUNK_SIZE - 1;
                        self.dir = Direction::Up;
                    }
                },
                5 => match self.dir {
                    Direction::Right => unreachable!(),
                    Direction::Down => unreachable!(),

                    Direction::Up => {
                        pos.y = CHUNK_SIZE * 2 + pos.x;
                        pos.x = 0;
                        self.dir = Direction::Right;
                    }
                    Direction::Left => {
                        pos.y = (CHUNK_SIZE - 1) - pos.y + CHUNK_SIZE * 2;
                        pos.x = 0;
                        self.dir = Direction::Right;
                    }
                },
                6 => match self.dir {
                    Direction::Left => unreachable!(),

                    Direction::Up => {
                        pos.x -= CHUNK_SIZE * 2;
                        pos.y = CHUNK_SIZE * 4 - 1;
                        self.dir = Direction::Up;
                    }
                    Direction::Down => {
                        pos.y = pos.x - CHUNK_SIZE;
                        pos.x = CHUNK_SIZE * 2 - 1;
                        self.dir = Direction::Left;
                    }
                    Direction::Right => {
                        pos.y = (CHUNK_SIZE - 1) - pos.y + CHUNK_SIZE * 2;
                        pos.x = CHUNK_SIZE * 2 - 1;
                        self.dir = Direction::Left;
                    }
                },
                _ => unreachable!(),
            }
        }

        //        Before Ln {}, Col {}
        // println!("After  Ln {}, Col {}", pos.y + 1, pos.x + 1);
        if self.map.get(&pos).unwrap().0 {
            self.dir = old_dir;
            true
        } else {
            self.pos = pos;
            false
        }
    }

    fn move_input_3d(&mut self, input: &Input) {
        match input {
            Input::Rotation(rotation) => {
                self.dir = self.dir.rotate(rotation);
            }
            Input::Move(amount) => {
                for _ in 0..*amount {
                    if self.move_dir_3d() {
                        break;
                    }
                }
            }
        }
    }

    fn final_password(&self) -> i32 {
        1000 * (self.pos.y + 1) + 4 * (self.pos.x + 1) + self.dir.into()
    }
}

pub enum Input {
    Rotation(Rotation),
    Move(u8),
}

impl From<&str> for Input {
    fn from(s: &str) -> Self {
        match s {
            "L" => Self::Rotation(Rotation::Left),
            "R" => Self::Rotation(Rotation::Right),
            _ => Self::Move(s.parse().unwrap()),
        }
    }
}

pub struct Day {
    day_num: u8,
}

impl days::Day for Day {
    type Input = (Grid, Vec<Input>);

    fn get_num(&self) -> u8 {
        self.day_num
    }

    fn new(day_num: u8) -> Self {
        Self { day_num }
    }

    fn part1(&mut self, input: &Self::Input) -> (String, bool) {
        let mut grid = input.0.clone();
        for input in input.1.iter() {
            grid.move_input(input);
        }
        (grid.final_password().to_string(), true)
    }

    fn part2(&mut self, input: &Self::Input) -> (String, bool) {
        let mut grid = input.0.clone();
        for input in input.1.iter() {
            grid.move_input_3d(input);
        }
        // grid.print();
        (grid.final_password().to_string(), true)
    }

    fn parse_input(&mut self, input: &String) -> Self::Input {
        let mut split = input.split("\n\n");
        let map = split.next().unwrap();
        let inputs_str = split.next().unwrap();
        // Parse the inputs
        // Some examples:
        // 10R5L5R
        // 10L4R5L5
        let mut inputs = vec![];
        let mut current = String::new();
        for c in inputs_str.chars() {
            match c {
                'L' | 'R' => {
                    if !current.is_empty() {
                        inputs.push(Input::Move(current.parse().unwrap()));
                        current = String::new();
                    }
                    inputs.push(Input::Rotation(Rotation::from(c)));
                }
                _ => {
                    current.push(c);
                }
            }
        }
        if !current.is_empty() {
            inputs.push(Input::Move(current.parse().unwrap()));
        }
        (Grid::from(map), inputs)
    }
}
